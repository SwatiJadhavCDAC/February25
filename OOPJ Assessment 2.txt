Q1: Write a program to swap two numbers without using a third variable and without
using arithmetic operators like + or -.
Hint: Use bitwise XOR ^ operator.

public class SwapNumbers {
    public static void main(String[] args) {
        int a = 10;
        int b = 20;
        
        System.out.println("Before swapping: a = " + a + ", b = " + b);
        
        a = a ^ b;
        b = a ^ b;
        a = a ^ b;
        
        System.out.println("After swapping: a = " + a + ", b = " + b);
    }
}

Q2: Write a program to check whether a given number is even or odd using only bitwise
operators .
Hint : Use n & 1 to check.

public class EvenOrOdd {
    public static void main(String[] args) {
        int n = 13;
        
        if ((n & 1) == 0) {
            System.out.println(n + " is even.");
        } else {
            System.out.println(n + " is odd.");
        }
    }
}

Q3: Implement a program that calculates the sum of digits of an integer using modulus
( % ) and division ( / ) operators .

public class SumOfDigits {
    public static void main(String[] args) {
        int number = 12345;
        int sum = 0;

        while (number > 0) {
            sum += number % 10;
            number = number / 10;
        }

        System.out.println("Sum of digits: " + sum);
    }
}

Q4: Write a program to find whether a given number is divisible by 3 without using the
modulus ( % ) or division ( / ) operators.
Hint : Use subtraction and bitwise shifts

public class DivisibleByThree {
    public static void main(String[] args) {
        int number = 9;
        boolean isDivisible = isDivisibleByThree(number);

        if (isDivisible) {
            System.out.println(number + " is divisible by 3.");
        } else {
            System.out.println(number + " is not divisible by 3.");
        }
    }

    public static boolean isDivisibleByThree(int n) {
        int oddCount = 0, evenCount = 0;

        if (n < 0) n = -n;
        if (n == 0) return true;
        if (n == 1) return false;

        while (n != 0) {
            if ((n & 1) != 0) oddCount++;
            n >>= 1;
            if ((n & 1) != 0) evenCount++;
            n >>= 1;
        }

        return isDivisibleByThree(Math.abs(oddCount - evenCount));
    }
}

Q5: Write a Java program to swap two numbers using the += and -= operators only.

public class SwapNumbers {
    public static void main(String[] args) {
        int a = 10;
        int b = 20;

        System.out.println("Before swapping: a = " + a + ", b = " + b);

        a = a + b;
        b = a - b;
        a = a - b;

        System.out.println("After swapping: a = " + a + ", b = " + b);
    }
}

2. Relational & Logical Operators

Q6: Write a program to find the largest of three numbers using only the ternary operator
( ? : ) .

public class LargestOfThree {
    public static void main(String[] args) {
        int a = 15;
        int b = 20;
        int c = 12;

        int largest = a > b ? (a > c ? a : c) : (b > c ? b : c);

        System.out.println("The largest number is: " + largest);
    }
}

Q7: Implement a Java program that checks whether a given year is a leap year or not using
logical ( && , || ) operators .

public class LeapYearChecker {
    public static void main(String[] args) {
        int year = 2024;

        boolean isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);

        System.out.println(year + " is " + (isLeapYear ? "a leap year." : "not a leap year."));
    }
}

Q8: Write a program that takes three boolean inputs and prints true if at least two of
them are true .
Hint : Use logical operators ( && , || ).

public class TwoTrueBooleans {
    public static void main(String[] args) {
        boolean a = true;
        boolean b = true;
        boolean c = false;

        boolean result = (a && b) || (a && c) || (b && c);

        System.out.println("At least two booleans are true: " + result);
    }
}

Q9: Implement a Java program that checks if a number is within a specific range (20 to 50) without using if-else.
Hint: Use logical AND (&&) in a print statement.

public class RangeChecker {
    public static void main(String[] args) {
        int number = 30;
        
        System.out.println("Is the number within the range 20 to 50? " + (number >= 20 && number <= 50));
    }
}

Q10: Write a program to determine if a character is a vowel or a consonant using the ternary operator.

public class VowelOrConsonant {
    public static void main(String[] args) {
        char ch = 'e';

        String result = (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||
                         ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') ? 
                        "Vowel" : "Consonant";

        System.out.println(ch + " is a " + result);
    }
}

3. Bitwise Operators
Q11: Write a program to check if a given number is a power of 2 using bitwise operators.
Hint : n & (n - 1) == 0 for positive numbers.

public class PowerOfTwo {
    public static void main(String[] args) {
        int n = 16;

        boolean isPowerOfTwo = (n > 0) && ((n & (n - 1)) == 0);

        System.out.println("Is " + n + " a power of 2? " + isPowerOfTwo);
    }
}

Q12: Write a Java program to multiply a number by 8 without using * or / operators.
Hint : Use bitwise left shift ( << ).

public class MultiplyByEight {
    public static void main(String[] args) {
        int number = 5;

        int result = number << 3;

        System.out.println("Multiplying " + number + " by 8 gives: " + result);
    }
}

Q13: Implement a Java program to find the absolute value of an integer using bitwise
operators.
Hint : mask = num >> 31; abs = (num + mask) ^ mask;

public class AbsoluteValue {
    public static void main(String[] args) {
        int num = -15;

        int mask = num >> 31;
        int abs = (num + mask) ^ mask;

        System.out.println("The absolute value of " + num + " is: " + abs);
    }
}

Q14: Write a program to count the number of 1s (set bits) in a binary representation of a
number using bitwise operations.
Hint : Use n & (n - 1) .

public class CountSetBits {
    public static void main(String[] args) {
        int n = 29;
        int count = 0;

        while (n != 0) {
            n = n & (n - 1);
            count++;
        }

        System.out.println("The number of 1s (set bits) is: " + count);
    }
}

Q15: Implement a program to swap odd and even bits of a number using bitwise
operators.
Hint : Use masks: (x & 0xAAAAAAAA) >> 1 | (x & 0x55555555) << 1 .

public class SwapOddEvenBits {
    public static void main(String[] args) {
        int x = 23;

        int oddMask = 0xAAAAAAAA;
        int evenMask = 0x55555555;

        int swapped = ((x & oddMask) >> 1) | ((x & evenMask) << 1);

        System.out.println("Original number: " + x);
        System.out.println("Number after swapping odd and even bits: " + swapped);
    }
}

4. Ternary Operator Challenges

Q16: Write a program that determines whether a given number is positive, negative, or zero using only the ternary operator.

public class NumberCheck {
    public static void main(String[] args) {
        int num = 0;

        String result = (num > 0) ? "positive" : ((num < 0) ? "negative" : "zero");

        System.out.println("The number is " + result);
    }
}

Q17: Implement a Java program that finds the minimum of four numbers using nested
ternary operators.

public class MinimumOfFour {
    public static void main(String[] args) {
        int a = 10;
        int b = 20;
        int c = 5;
        int d = 15;

        int min = a < b ? (a < c ? (a < d ? a : d) : (c < d ? c : d)) : (b < c ? (b < d ? b : d) : (c < d ? c : d));

        System.out.println("The minimum number is: " + min);
    }
}

Q18: Given a student’s percentage, print “Pass” if the percentage is 40 or above;
otherwise, print “Fail” , using only the ternary operator.

public class PassFail {
    public static void main(String[] args) {
        double percentage = 39; 

        String result = percentage >= 40 ? "Pass" : "Fail";

        System.out.println("The student's result is: " + result);
    }
}

Q19: Write a Java program that checks whether a character is uppercase, lowercase, or not a letter using only the ternary operator.

public class CharacterCheck {
    public static void main(String[] args) {
        char ch = 'A'; 

        String result = (ch >= 'A' && ch <= 'Z') ? "Uppercase" :
                        (ch >= 'a' && ch <= 'z') ? "Lowercase" : "Not a letter";

        System.out.println("The character '" + ch + "' is: " + result);
    }
}


Q20: Implement a Java program that returns the absolute value of a given number using the ternary operator (without using Math.abs()).

public class AbsoluteValue {
    public static void main(String[] args) {
        int num = -10;

        int absValue = num < 0 ? -num : num;

        System.out.println("The absolute value of " + num + " is: " + absValue);
    }
}

5. Miscellaneous Operator Questions
Q21: Write a program that increments a number without using + or ++ operators.
Hint : Use bitwise - (~x) .

public class IncrementWithoutPlus {
    public static void main(String[] args) {
        int x = 5;

        int result = -~x;

        System.out.println("Original number: " + x);
        System.out.println("Incremented number: " + result);
    }
}

Q22: Implement a calculator that takes two numbers and an operator ( + , - , * , / ) as input
and prints the result using only switch-case .

import java.util.Scanner;

public class SimpleCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter first number:");
        double num1 = scanner.nextDouble();

        System.out.println("Enter second number:");
        double num2 = scanner.nextDouble();

        System.out.println("Enter operator (+, -, *, /):");
        char operator = scanner.next().charAt(0);

        double result = 0;

        switch (operator) {
            case '+':
                result = num1 + num2;
                break;
            case '-':
                result = num1 - num2;
                break;
            case '*':
                result = num1 * num2;
                break;
            case '/':
                if (num2 != 0) {
                    result = num1 / num2;
                } else {
                    System.out.println("Division by zero is not allowed.");
                }
                break;
            default:
                System.out.println("Invalid operator.");
                return;
        }

        System.out.println("Result: " + result);
    }
}

Q23: Given a number, find whether it is odd or even using the & bitwise operator and print
the result without using if-else .

import java.util.Scanner;

public class OddOrEven {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter a number:");
        int number = scanner.nextInt();

        String result = (number & 1) == 1 ? "Odd" : "Even";

        System.out.println("The number is " + result);
    }
}

Q24: Write a program that prints all even numbers from 1 to 100 using only bitwise AND
( & ) and for loop.

public class PrintEvenNumbers {
    public static void main(String[] args) {
        for (int i = 1; i <= 100; i++) {
            if ((i & 1) == 0) {
                System.out.println(i);
            }
        }
    }
}

Q25: Implement a program that reverses an integer number without using string
conversion ( StringBuilder or toCharArray ).
Hint : Use while(n!=0) { rev = rev * 10 + n % 10; n /= 10; }

public class ReverseInteger {
    public static void main(String[] args) {
        int n = 12345;
        int rev = 0;

        while (n != 0) {
            rev = rev * 10 + n % 10;
            n /= 10;
        }

        System.out.println("Reversed number: " + rev);
    }
}
